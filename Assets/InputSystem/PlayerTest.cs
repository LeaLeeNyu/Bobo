//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/InputSystem/PlayerTest.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerTest : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerTest()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerTest"",
    ""maps"": [
        {
            ""name"": ""BoboOnRoad"",
            ""id"": ""96e28b5d-c7c0-4cc3-8322-9d65187a56fb"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ff755f43-f67d-4a1f-9c23-6b3455c1720c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""7e12c290-2fdb-41b3-b6ce-106dc3311538"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ab66e8b8-3324-4f6d-8036-a5020c758529"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03ce9ab2-954c-4cab-bf4e-070d804f24cc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BoboOnRoad
        m_BoboOnRoad = asset.FindActionMap("BoboOnRoad", throwIfNotFound: true);
        m_BoboOnRoad_Jump = m_BoboOnRoad.FindAction("Jump", throwIfNotFound: true);
        m_BoboOnRoad_Walk = m_BoboOnRoad.FindAction("Walk", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BoboOnRoad
    private readonly InputActionMap m_BoboOnRoad;
    private IBoboOnRoadActions m_BoboOnRoadActionsCallbackInterface;
    private readonly InputAction m_BoboOnRoad_Jump;
    private readonly InputAction m_BoboOnRoad_Walk;
    public struct BoboOnRoadActions
    {
        private @PlayerTest m_Wrapper;
        public BoboOnRoadActions(@PlayerTest wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_BoboOnRoad_Jump;
        public InputAction @Walk => m_Wrapper.m_BoboOnRoad_Walk;
        public InputActionMap Get() { return m_Wrapper.m_BoboOnRoad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoboOnRoadActions set) { return set.Get(); }
        public void SetCallbacks(IBoboOnRoadActions instance)
        {
            if (m_Wrapper.m_BoboOnRoadActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_BoboOnRoadActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BoboOnRoadActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BoboOnRoadActionsCallbackInterface.OnJump;
                @Walk.started -= m_Wrapper.m_BoboOnRoadActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_BoboOnRoadActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_BoboOnRoadActionsCallbackInterface.OnWalk;
            }
            m_Wrapper.m_BoboOnRoadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
            }
        }
    }
    public BoboOnRoadActions @BoboOnRoad => new BoboOnRoadActions(this);
    public interface IBoboOnRoadActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
    }
}
